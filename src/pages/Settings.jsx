import { useLanguage } from "../Components/Main/Main";
import { useState, useEffect } from "react";
import "./PageStyles.css";
import "./Settings.css";

const Settings = () => {
  const { language, setLanguage, getText } = useLanguage();
  const [theme, setTheme] = useState('system');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') || 'system';
    setTheme(savedTheme);
  }, []);

  const applyTheme = (selectedTheme) => {
    const root = document.documentElement;
    
    if (selectedTheme === 'system') {
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      root.setAttribute('data-theme', systemPrefersDark ? 'dark' : 'light');
    } else {
      root.setAttribute('data-theme', selectedTheme);
    }
  };

  const handleThemeChange = (newTheme) => {
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    applyTheme(newTheme);
  };

  const handleLanguageChange = (newLanguage) => {
    setLanguage(newLanguage);
  };

  return (
    <div className="page-container">
      <div className="page-content">
        <div className="page-header">
          <h1 className="page-title">
            {getText('‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏', 'Settings')}
          </h1>
          <div className="page-divider"></div>
        </div>

        <div className="page-body">
          <section className="content-section">
            <h2 className="section-title">
              {getText('‡¶•‡¶ø‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®', 'Theme Selection')}
            </h2>
            <p className="section-text">
              {getText(
                '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶•‡¶ø‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶•‡¶ø‡¶Æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá‡•§',
                'Choose your preferred theme. System theme will follow your device settings.'
              )}
            </p>
            
            <div className="settings-group">
              <div className="theme-options">
                <div 
                  className={`theme-option ${theme === 'light' ? 'active' : ''}`}
                  onClick={() => handleThemeChange('light')}
                >
                  <div className="theme-preview light-preview">
                    <i className="ri-sun-line theme-icon"></i>
                  </div>
                  <span className="theme-label">
                    {getText('‡¶π‡¶æ‡¶≤‡¶ï‡¶æ', 'Light')}
                  </span>
                </div>
                
                <div 
                  className={`theme-option ${theme === 'dark' ? 'active' : ''}`}
                  onClick={() => handleThemeChange('dark')}
                >
                  <div className="theme-preview dark-preview">
                    <i className="ri-moon-line theme-icon"></i>
                  </div>
                  <span className="theme-label">
                    {getText('‡¶ó‡¶æ‡¶¢‡¶º', 'Dark')}
                  </span>
                </div>
                
                <div 
                  className={`theme-option ${theme === 'system' ? 'active' : ''}`}
                  onClick={() => handleThemeChange('system')}
                >
                  <div className="theme-preview system-preview">
                    <i className="ri-computer-line theme-icon"></i>
                  </div>
                  <span className="theme-label">
                    {getText('‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ', 'System')}
                  </span>
                </div>
              </div>
            </div>
          </section>

          <section className="content-section">
            <h2 className="section-title">
              {getText('‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®', 'Language Selection')}
            </h2>
            <p className="section-text">
              {getText(
                '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡•§',
                'Choose your preferred language. Bengali is set as the default language.'
              )}
            </p>
            
            <div className="settings-group">
              <div className="language-options">
                <div 
                  className={`language-option ${language === 'bn' ? 'active' : ''}`}
                  onClick={() => handleLanguageChange('bn')}
                >
                  <div className="language-preview">
                    <span className="language-flag">üáßüá©</span>
                  </div>
                  <div className="language-info">
                    <span className="language-name">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ</span>
                    <span className="language-subtitle">Bengali</span>
                  </div>
                  {language === 'bn' && (
                    <span className="default-badge">
                      {getText('‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü', 'Default')}
                    </span>
                  )}
                </div>
                
                <div 
                  className={`language-option ${language === 'en' ? 'active' : ''}`}
                  onClick={() => handleLanguageChange('en')}
                >
                  <div className="language-preview">
                    <span className="language-flag">üá∫üá∏</span>
                  </div>
                  <div className="language-info">
                    <span className="language-name">English</span>
                    <span className="language-subtitle">‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø</span>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section className="content-section">
            <h2 className="section-title">
              {getText('‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá', 'About')}
            </h2>
            <p className="section-text">
              {getText(
                '‡¶Ö‡¶®‡ßç‡¶¨‡ßá‡¶∑‡¶£ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶® ‡¶Ø‡¶æ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ü‡¶ø SlotHub ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ó‡•§',
                'Onneshon is a modern Bengali search engine that provides fast and accurate results. It is an initiative by SlotHub.'
              )}
            </p>
            
            <div className="about-info">
              <div className="info-item">
                <span className="info-label">
                  {getText('‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£', 'Version')}:
                </span>
                <span className="info-value">1.0.0</span>
              </div>
              <div className="info-item">
                <span className="info-label">
                  {getText('‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞', 'Developer')}:
                </span>
                <span className="info-value">SlotHub</span>
              </div>
            </div>
          </section>
        </div>

        <div className="page-footer">
          <a href="/" className="back-link">
            <i className="ri-arrow-left-line"></i>
            {getText('‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®', 'Back to Home')}
          </a>
        </div>
      </div>
    </div>
  );
};

export default Settings;